There are two kinds of event lists: actions and callbacks.
Actions are called per Widget, as they are executed when a specific thing on that Widget happened.
Callbacks are global, and therefore they are not assigned to any Widget. They are executed when a specific ingame event occurs.

Action headers are written as this:
[widget].[actionType] ->

while callback headers like this:
[callbackType] >>

There are several types of actions and callbacks.
Actions:
- showEnd - When the Widget fade in animation was finished.
- hideEnd - When the Widget fade out animation was finished.
- buttonClick - When the WidgetButton was clicked.

Callbacks:
- sessionInit - When the game starts (after the splash screen).
- levelStart - When a level is initialized or restarted.
- levelLost - When a level was lost (after last sphere disappears in the pyramid).
- gameOver - When a game over happens.
- profileHighscoreWriteSuccess - When a player was qualified to a high score.
- profileHighscoreWriteFail - When a player was not qualified to a high score.



Both actions and callbacks can host an indefinite number of events. Events can be selected from several kinds.
Each event can or cannot have some kind of parameters. A parameter can be a text, number or a path to a Widget.

The events are executed one after another, unless explicitly said, and are written like this:
[event]:[[parameter1],[parameter2],...]

Events:
=== General ===
- print:[string] - Prints the string to the console. Useful for debugging.
- quit: - Exits the game.

=== Control ===
- end: - Ends the list execution.
- wait:[widget],[action] - Waits until a specified Action happens on a specified Widget.
This automatically ends the list execution and passes the unexecuted events onto the Action of the Widget.
These events are automatically deleted from their temporary place upon execution.
!UNIMPLEMENTED!- waitC:[condition] - Waits until a specified Condition will be met.
This automatically ends the list execution and passes the unexecuted events to the event queue.
The condition is checked every single frame, and when it's met, these events are executed.
- jump:[condition],[steps] - Omits a specified number of events when the Condition is met.
Effectively supplements if/else statements.

=== Widgets ===
- widgetShow:[widget] - Shows a Widget.
- widgetHide:[widget] - Hides a Widget.
- widgetClean:[widget] - Cleans a Widget.
- widgetSetActive:[widget] - Sets a Widget as active along with all its children, deactivating all other Widgets.
- widgetButtonDisable:[widget] - Disables a WidgetButton.
- widgetButtonEnable:[widget] - Enables a WidgetButton.

=== Other ===
- musicVolume:[music],[volume] - Sets a Music volume to the specified value. Not usable for level music.
Volume is a value from 0 to 1. After execution, the music fades and it is not set to the desired volume directly.
- profileHighscoreWrite: - Tries to write current score under the active Profile to the Leaderboard.
Either a profileHighscoreWriteSuccess or a profileHighscoreWriteFail callback is executed.



A Condition syntax is very flexible, but it always contains a question mark. It looks like this:
[conditionType]?(depends on conditionType)

Currently available condition types:
- widget?[widget].[property]=[value] - Checks a Property of a Widget and compares it to a value.
Allowed Widget properties:
	- visible (true/false) - Whether a Widget is currently visible.
	- buttonActive (true/false) - Whether a Button can be clicked.
- level?[property]=[value]
Allowed properties:
	- paused (true/false) - Whether the Level is paused.
!UNIMPLEMENTED!- game?[property]=[value] - Checks a game variable.
Allowed properties:
	- levelExists (true/false) - Whether a level exists is being currently played.